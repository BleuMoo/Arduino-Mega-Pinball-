#include <Wire.h> 
//#include <LCD_I2C.h>

#include <SPI.h>
//#include  <SdFat.h>
//#include <FreeStack.h>
// Including the required Arduino libraries
#include <MD_Parola.h>
#include <MD_MAX72xx.h>
#include <SPI.h>


//and the MP3 Shield Library
//#include  <SFEMP3Shield.h>
//#include <EEPROMex.h>
#include <Arduino.h>

//SdFat sd;     //May add SD card to store the scores
//SFEMP3Shield  MP3player;//May add MP3 player

//LCD_I2C lcd(0x27, 20, 4);  // Set the LCD I2C address


long score = 0; 
int MaxBalls = 5;
long RecordScore;
int gameOn = 0;
int relay_count = 16;
const int buttonPin = 50;

int relay[]={22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37}; //relay outout
int point[]={40,41,42,43,44,45,46,47,48,49,53}; //inputs to collect points
// Uncomment according to your hardware type
#define HARDWARE_TYPE MD_MAX72XX::FC16_HW
//#define HARDWARE_TYPE MD_MAX72XX::GENERIC_HW

// Defining size, and output pins
#define MAX_DEVICES 4
#define CS_PIN 12

long count = 0;
int button = 0;
//const int buttonPin = 50;
// Create a new instance of the MD_Parola class with hardware SPI connection
MD_Parola myDisplay = MD_Parola(HARDWARE_TYPE, CS_PIN, MAX_DEVICES);
const int Start = 2;
int Start_game = 0;
const int Stop = 3;
int Stop_game = 0;
const int Reset = 4;
int Reset_game = 0;
int lastButtonState = 0; 

int First_scan = 0;
void setup() {
  Serial.begin(9600);
  pinMode(Start, INPUT); //set Start pin as input
  pinMode(Reset, INPUT); //set Reset pin as input
  pinMode(Stop, INPUT);  //set Stop (ball lost) as input
  pinMode(buttonPin, INPUT);
 int i = 0;
 for(i=0; i < 16; i++){
   pinMode(relay[i], OUTPUT); //set relays pins as outputs
  }
  
  int j = 0;
  for(j=0; j < 15; j++){
    pinMode(point[j], INPUT); //set point pins as inputs
  }
  myDisplay.begin();
  //myDisplay.displayClear();
  myDisplay.print("SPACE CATS");
  delay(5000);
  myDisplay.print("Let's Play");
  delay(5000);
  myDisplay.print("Please Wait");
  delay(5000);

}

void loop() {
  if(First_scan == 0){
  myDisplay.displayClear();
    First_scan ++;
  }

  myDisplay.print("Press Start");
  Start_game = digitalRead(Start);
  if(Start_game == HIGH){
    gameOn = 1;
      myDisplay.displayClear();
    myDisplay.print("Game starting");
    delay(2000);
      myDisplay.displayClear();
  }
 
  if(gameOn == 1){
      //myDisplay.displayClear();
    //myDisplay.print("Game ON Get Ready!");  
    //relese the ball
    //MaxBalls --;
    //myDisplay.print("Balls left" );
    //delay(5000);
    //myDisplay.setTextAlignment(PA_RIGHT);
    //myDisplay.print(MaxBalls);  
    //delay(5000);
     // myDisplay.displayClear();
    game();
    //currentScore();
  }
  delay(1);
}
void game(){ 
  //game will happen here

  button = digitalRead(buttonPin);

  // compare the buttonState to its previous state
  if (button != lastButtonState) {
    // if the state has changed, increment the counter
    if (button == HIGH) {
    count = count + 1000;
  }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  // save the current state as the last state, for next time through the loop
  lastButtonState = button;

  delay(1);

  Reset_game = digitalRead(Reset);
  while(Reset_game == HIGH){   //reset button has been pressed for 5s. and program going to main loop
    myDisplay.displayClear();
    myDisplay.print("Game reseting");   
    //delay(2500);
    gameOn = 0;
    return;
  }
  Stop_game = digitalRead(Stop); //lost ball
  if(Stop_game == 1){
    myDisplay.displayClear();
    myDisplay.print("Ball Lost!");
    delay(5000);
    MaxBalls --;
    gameOn = 1;
    myDisplay.displayClear();
    Stop_game = digitalRead(Stop);
    if(MaxBalls == 0){
      GameOver();
    }
    
  }
  currentScore();
  
}

void currentScore(){

  myDisplay.setTextAlignment(PA_RIGHT);
	myDisplay.print(count);
  game();
}

void GameOver(){
  myDisplay.displayClear();
  myDisplay.print("GAME OVER");
  delay(2000);
  myDisplay.print("Score:");
  delay(2000);
  myDisplay.print(score);
  delay(2000);
  //RecordScore = EEPROM.read(1);
  delayMicroseconds(10);
  if(score > RecordScore){
  myDisplay.print("New Record!!");
  //  digitalWrite(pin x, HIGH); //Do something with I/Os
    //lcd.setCursor(0, 1);
    //lcd.print(score);
    //EEPROM.update(1, score); //update record points to eeprom
    delay(20); // wait 10s to do something
  }
  delay(5000);
  First_scan = 0;
  ResetGame();
}
void ResetGame(){
  score = 0;
  MaxBalls = 5;
  //lcd.setCursor(0,0);
  //lcd.print("SPACE CATS");  //Game reset
  //lcd.setCursor(0,1);
  //lcd.print("Let's Play!");
  gameOn = 0;
}
