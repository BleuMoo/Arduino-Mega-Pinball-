#include <SD.h>
#include <Wire.h> 
#include <stdlib.h>
#include <stdio.h>
#include <string>
//#include <TMRpmc.h>
#include <SD.h>
#include <SPI.h>
#include <MD_Parola.h>
#include <MD_MAX72xx.h>
#include <Arduino.h>
#include "dropDown.h"
#include "paw.h"
#include "sensor.h"
#include "kicker.h"
#include "bumper.h"
//int relay[]={22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37}; //relay outout
//int point[]={40,41,42,43,44,45,46,47,48,49}; //inputs to collect points
// Uncomment according to your hardware type
#define HARDWARE_TYPE MD_MAX72XX::FC16_HW

// Defining size, and output pins

#define MAX_DEVICES 4
#define NUM_ZONES 4
#define DATA_PIN 51
#define CLK_PIN 52
#define CS_PIN 50


// Create a new instance of the MD_Parola class with hardware SPI connection
MD_Parola  myDisplay = MD_Parola(HARDWARE_TYPE, DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES);
File myFile;
dropDown dropDown1(48,47,46,45);
dropDown dropDown2(44,43,42,41);
dropDown dropDown3(40,39,38,37);
paw paw1(36);
paw paw2(35);
paw paw3(34);
paw paw4(33);
sensor sensor(32);
kicker kickerL(20);
kicker kickerR(21);
bumper bumperR(19);
bumper bumperL(18);
const int chipSelect = SDCARD_SS_PIN;
const int Start = 2;
const int Stop = 7;
const int Reset = 4;
const char *message[11] = 
{
  // "SPACE CATS", "Lets Play!", "Please wait", "Press Start", "Game starting", "Game ON get ready", "Balls Left", "Ball Lost" "Game Resetting", "Game Over!"
  "A", "B", "C", "D", "E","F","G","H","I","J","K"
};


int Start_game = 0;
int Stop_game = 0;
int Reset_game = 0;
int lastButtonState = 0; 
int dropDownState = 0;
int score= 0;
int point = 1;
char scoreArray[2000];
char highScoreArray[20];
int MaxBalls = 5;
long RecordScore;
int gameOn = 0;
int First_scan = 0;
int startState = 0;
int stopState = 0;

uint16_t speed = 500;
uint16_t pause = 500;
uint8_t display = 0;

void setup() {
  Serial.begin(9600);

  pinMode(Start, INPUT); //set Start pin as input
  pinMode(Reset, INPUT); //set Reset pin as input
  pinMode(Stop, INPUT);  //set Stop (ball lost) as input
  myDisplay.begin(NUM_ZONES);
  myDisplay.setZone(0,0,0); // current score zone
  myDisplay.setZone(1,1,1); // HIGH score zone
  myDisplay.setZone(2,2,2); // Messages Zone
  myDisplay.setZone(3,3,3); // Space Cats Zone
  myDisplay.setIntensity(2);
  myDisplay.setInvert(false);

  myDisplay.displayZoneText(3,message[0], PA_CENTER, speed, pause, PA_NO_EFFECT,PA_NO_EFFECT);
  myDisplay.displayZoneText(2, message[1], PA_CENTER,speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);


 }

void loop() {
  displayMessages();
    if (myDisplay.displayAnimate()) // animates and returns true when an animation is completed
  {
    for (uint8_t i=0; i<NUM_ZONES; i++)
  {
      if (myDisplay.getZoneStatus(i))
      {   
      myDisplay.displayZoneText(0, (itoa(score, scoreArray, 10)), PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
      myDisplay.displayZoneText(1,(itoa(RecordScore, highScoreArray, 10)), PA_CENTER, speed, pause, PA_NO_EFFECT,PA_NO_EFFECT);
      myDisplay.displayReset(i);
      }
  }
  }
   Start_game = digitalRead(Start);
  if (Start_game != startState){
  if(Start_game == HIGH)
  {
    gameOn = 1;
    display = 2;
  
    Serial.println("Starting");
  
  }
    delay(50);
  startState=Start_game;
  }
  if(gameOn == 1){
   game();
 } 
 if(gameOn == 2)
 {
  //GameOver();
 }

  }

void displayMessages()
  {   
  myDisplay.displayAnimate();
  if (myDisplay.getZoneStatus(2)){
  
  switch (display){
    case 0:
    myDisplay.displayZoneText(2, message[2], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    display++;
    break;

    case 1:
    myDisplay.displayZoneText(2, message[3], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    break;

    case 2:
    myDisplay.displayZoneText(2, message[4], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    display++;
    break;

    case 3:
    myDisplay.displayZoneText(2, message[5], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    break;

    case 4:
    myDisplay.displayZoneText(2,message[6], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    break;

    case 5:
    myDisplay.displayZoneText(2,message[7], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    break;

    case 6:
    myDisplay.displayZoneText(2,message[8], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    if(MaxBalls > 0)
    {
      display = 3;
    }
    if(MaxBalls == 0)
    {
      display = 7;
    }
    break;

    case 7:
    myDisplay.displayZoneText(2,message[9], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
     
    break;
    
    case 8:
    myDisplay.displayZoneText(2,message[10], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    break;

    case 9:
    myDisplay.displayZoneText(2,message[11], PA_CENTER, speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);

    default:
    myDisplay.displayZoneText(2, message[1], PA_CENTER,speed, pause, PA_NO_EFFECT, PA_NO_EFFECT);
    display ++;
    break;


  }
 
  }
  }

void game()
 { 
  while(gameOn=1){
    paw1.claw(); paw2.claw(); paw3.claw(); paw4.claw();
  dropDown1.targets(); dropDown1.reset(); 
  dropDown2.targets(); dropDown2.reset();
  dropDown3.targets(); dropDown3.reset();
  sensor.sensorRead();
  kickerL.kickerRead(); kickerR.kickerRead();
  bumperR.bumperRead(); bumperL.bumperRead();
  Reset_game = digitalRead(Reset);
  while(Reset_game == HIGH){   //reset button has been pressed for 5s. and program going to main loop
  display = 8;
    gameOn = 0;
    return;
  }
  Stop_game = digitalRead(Stop); //lost ball
  if(Stop_game != stopState){
  if(Stop_game == HIGH){
    display = 6;
    MaxBalls --;
    Serial.println("Ball Lost");
    
  
    // //Stop_game = digitalRead(Stop);
    if(MaxBalls == 0){
      // Serial.println("Game Over");
      Serial.println(score);
      gameOn=2;
    display = 7;
    displayMessages();
   // GameOver();
     
    }
    
  }
  delay(50);
  stopState=Stop_game;
  }
 
 return; 
 }

 }

void GameOver(){
  // display = 7;
   Serial.println("Game Over");
  // myFile =SD.open("highscore.txt",FILE_WRITE);
  // if(score > RecordScore){
  // display = 9;
  // if(myFile){
  // myFile.println(RecordScore);
  //   delay(20); // wait 10s to do something
  //   myFile.close();
  // }
  // }
  //delay(5000);
  gameOn=0;
  First_scan = 0;
  ResetGame();
 }
void ResetGame(){
  score = 0;
  MaxBalls = 5;
  display= -1;
  gameOn = 0;
 }
